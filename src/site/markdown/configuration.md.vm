#set($symbol_pound = '#')

$symbol_pound$symbol_pound Configuration

$symbol_pound$symbol_pound Maven Plugin

The CQ Component Plugin requires two Maven configurations.  First is the plugin configuration itself.
Second is the addition of a Maven dependency containing the annotations used to identify Java Classes as Components
and Fields and Methods as authorable elements as well as the abstract classes and interfaces necessary extends the plugin.

$symbol_pound$symbol_pound$symbol_pound Maven POM
	<plugin>
	    <groupId>com.citytechinc.cq.cq-component-plugin</groupId>
	    <artifactId>cq-component-maven-plugin</artifactId>
	    <version>${project.version}</version>
	    <extensions>true</extensions>
	    <executions>
	        <execution>
	            <goals>
	                <goal>component</goal>
	            </goals>
	        </execution>
	    </executions>
	    <configuration>
	        <componentPathBase>jcr_root/apps/client/components</componentPathBase>
	        <componentPathSuffix>content</componentPathSuffix>
	        <defaultComponentGroup>Client Group</defaultComponentGroup>
	        <transformerName>camel-case</transformerName>
	        <generateTouchUiDialogs>true</generateTouchUiDialogs>
	        <excludedDependencies>
	           <dependency>
	               <groupId>dependency.group.id</groupId>
	               <artifactId>dependency-artifact-id</artifactId>
	           </dependency>
	        </excludedDependencies>
	        <additionalFeatures>
                <additionalFeature>feature-flag</additionalFeature>
                <additionalFeature>another-feature-flag</additionalFeature>
            </additionalFeatures>
	    </configuration>
	</plugin>


$symbol_pound$symbol_pound$symbol_pound Maven Dependency

	<dependency>
		<groupId>com.citytechinc.cq.cq-component-plugin</groupId>
		<artifactId>cq-component-annotations</artifactId>
		<version>${project.version}</version>
	</dependency>
	
$symbol_pound$symbol_pound Gradle Plugin

The CQ Component Plugin requires three Gradle configurations.  First is the build script configuration to include the plugin.
Second is the addition of the componentPlugin extension to set the properties.  The third is setting the plugin to depend on
a part of the build.

$symbol_pound$symbol_pound$symbol_pound Build Script

	buildscript {
		repositories {
			mavenLocal()
			mavenCentral()
		}
		dependencies {
			classpath group: 'com.citytechinc.cq.cq-component-plugin', name: 'cq-component-maven-plugin', version: '${project.version}'
		}
	}


$symbol_pound$symbol_pound$symbol_pound componentPlugin Extension

$symbol_pound$symbol_pound$symbol_pound$symbol_pound Example

	componentPlugin {
		componentPathBase = "jcr_root/apps/project/components"
		componentPathSuffix="content"
		defaultComponentGroup="Project"
		transformerName="camel-case"
	}
	
$symbol_pound$symbol_pound$symbol_pound Depends On

	install.dependsOn generateComponents


$symbol_pound$symbol_pound Configurable Properties
<table class="table table-striped break-words-table">
	<thead>
		<tr>
			<th>Element</th>
			<th>Type</th>
			<th>Default</th>
			<th>Description</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>componentPathBase</td>
			<td>String</td>
			<td></td>
			<td>
				The content path to your project's components within the apps content tree.  The full path to which
	          files for an individual component will be written is:
	          `componentPathBase + / + componentPathSuffix + / + component name` (annotated per component or based
	          on the name of the component class if not annotated).  The component path as a whole can be overridden
	          at the component level via the `path` property of the @Component annotation.
			</td>
		</tr>
		<tr>
			<td>componentPathSuffix</td>
			<td>String</td>
			<td>content</td>
			<td>See the description of componentPathBase for an explanation of how this property is used in
	          the construction of a path to which component files will be written.
			</td>
		</tr>
		<tr>
			<td>defaultComponentGroup</td>
			<td>String</td>
			<td></td>
			<td>The group to which Components whose files are generated via this plugin will be added in the
	          CQ Sidekick.  This can be overridden at the component level via the `group` property of the
	          @Component annotation.
			</td>
		</tr>
		<tr>
			<td>transformerName</td>
			<td>String</td>
			<td>camel-case</td>
			<td>The name of the transformer used to change from a the name of a class to the folder in the jcr.  The
				defaults available are:
				<ul>
					<li>camel-case: Converts the class name to camel case</li>
					<li>lower-case: Converts the class name to lower case</li>
					<li>lower-case-dash: Converts the class name to lower case and separates words with dashes.  Word boundaries are based on camel case standards.</li>
				</ul>
			</td>
		</tr>
        <tr>
            <td>excludedDependencies</td>
            <td>List</td>
            <td></td>
            <td>A list of Dependencies whose Components should be excluded from the construction process.  XML
                files will not be generated by this plugin for any Java Classes annotated as Components which are
                members of any of the Dependencies in this list.
                <br/>
                <br/>
                <b>Currently unavailable in the Gradle Plugin.</b>
            </td>
        </tr>
        <tr>
            <td>generateTouchUiDialogs</td>
            <td>Boolean</td>
            <td>true</td>
            <td>Enabled the generation of dialogs for Touch UI</td>
        </tr>
        <tr>
            <td>additionalFeatures</td>
            <td>List</td>
            <td></td>
            <td>A list of Feature Flags for features which should be enabled.  See the Additional Features page 
                for more information on this configuration.</td>
        </tr>
	</tbody>
</table>
